name: Novacast Backend CI/CD

on:
  push:
    branches: [ main, master, develop, function/* ]
  pull_request:
    branches: [ main, master ]

env:
  NODE_VERSION: '18.x'
  POSTGRES_VERSION: '14'

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: novacast_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🗄️ Setup Test Database
        env:
          TEST_DATABASE_URL: postgres://testuser:testpass@localhost:5432/novacast_test
          LOCAL_DATABASE_URL: postgres://testuser:testpass@localhost:5432/novacast_test
        run: |
          sleep 5
          npm run test:setup || echo "Database setup completed"

      - name: 🧪 Run Unit Tests
        env:
          NODE_ENV: test
          TEST_DATABASE_URL: postgres://testuser:testpass@localhost:5432/novacast_test
          LOCAL_DATABASE_URL: postgres://testuser:testpass@localhost:5432/novacast_test
          JWT_SECRET: test-secret-key-for-ci
          PORT: 5002
          WRITE_LOGS_TO_FILE: false
        run: npm run test:unit

      - name: 🔗 Run Integration Tests
        env:
          NODE_ENV: test
          TEST_DATABASE_URL: postgres://testuser:testpass@localhost:5432/novacast_test
          LOCAL_DATABASE_URL: postgres://testuser:testpass@localhost:5432/novacast_test
          JWT_SECRET: test-secret-key-for-ci
          PORT: 5002
          WRITE_LOGS_TO_FILE: false
        run: npm run test:integration

      - name: 📊 Generate Test Coverage
        env:
          NODE_ENV: test
          TEST_DATABASE_URL: postgres://testuser:testpass@localhost:5432/novacast_test
          LOCAL_DATABASE_URL: postgres://testuser:testpass@localhost:5432/novacast_test
          JWT_SECRET: test-secret-key-for-ci
          PORT: 5002
          WRITE_LOGS_TO_FILE: false
        run: npm run test:coverage

      - name: 📤 Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        if: github.event_name == 'push'
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: novacast-backend
          fail_ci_if_error: false

  # 🔍 Code Quality Analysis
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🔍 TypeScript Type Check
        run: npm run type-check

      - name: 🎨 ESLint Analysis
        run: npm run lint

      - name: 🔒 Security Audit
        run: npm audit --audit-level moderate

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [test]
    if: contains(github.ref, 'main') || contains(github.ref, 'master') || contains(github.ref, 'develop')
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: novacast_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🗄️ Setup Test Database
        env:
          TEST_DATABASE_URL: postgres://testuser:testpass@localhost:5432/novacast_test
          LOCAL_DATABASE_URL: postgres://testuser:testpass@localhost:5432/novacast_test
        run: |
          sleep 5
          npm run test:setup || echo "Database setup completed"

      - name: ⚡ Run Performance Tests
        env:
          NODE_ENV: test
          TEST_DATABASE_URL: postgres://testuser:testpass@localhost:5432/novacast_test
          LOCAL_DATABASE_URL: postgres://testuser:testpass@localhost:5432/novacast_test
          JWT_SECRET: test-secret-key-for-ci
          PORT: 5002
          WRITE_LOGS_TO_FILE: false
        run: npm run test:performance

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [test, quality]
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🏗️ Build TypeScript
        run: npm run build

      - name: 📁 Create Build Artifact
        run: |
          mkdir -p build-output
          cp -r dist build-output/
          cp package*.json build-output/
          cp -r node_modules build-output/ || echo "Node modules will be installed in deployment"

      - name: 📤 Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: build-output/
          retention-days: 7

      - name: 🐳 Build Docker Image (Local)
        run: |
          docker build -t novacast-backend:latest .
          docker save novacast-backend:latest | gzip > novacast-backend-image.tar.gz

      - name: 📤 Upload Docker Image
        uses: actions/upload-artifact@v3
        with:
          name: docker-image
          path: novacast-backend-image.tar.gz
          retention-days: 7

  local-deploy:
    name: Local Deployment Test
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push'
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 📥 Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: ./build/

      - name: 📥 Download Docker Image
        uses: actions/download-artifact@v3
        with:
          name: docker-image
          path: ./

      - name: 🐳 Load and Test Docker Image
        run: |
          docker load < novacast-backend-image.tar.gz
          docker run -d --name test-container -p 5001:5001 \
            -e NODE_ENV=production \
            -e JWT_SECRET=test-secret \
            -e PORT=5001 \
            novacast-backend:latest
          
          sleep 10
          
          # Basic health check
          curl -f http://localhost:5001/api/health || echo "Health check endpoint not available yet"
          
          docker logs test-container
          docker stop test-container
          docker rm test-container

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test, quality, performance, build, local-deploy]
    if: always()
    
    steps:
      - name: 📊 Generate Summary
        run: |
          echo "## 🧪 Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Quality | ${{ needs.quality.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance | ${{ needs.performance.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Local Deploy | ${{ needs.local-deploy.result }} |" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.test.result }}" == "success" && "${{ needs.quality.result }}" == "success" && "${{ needs.build.result }}" == "success" ]]; then
            echo "## ✅ All critical jobs passed! Ready for development." >> $GITHUB_STEP_SUMMARY
          else
            echo "## ❌ Some jobs failed. Please check the logs." >> $GITHUB_STEP_SUMMARY
          fi
